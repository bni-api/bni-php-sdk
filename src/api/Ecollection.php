<?php

namespace BniApi\BniPhp\api;

use BniApi\BniPhp\Bni;
use BniApi\BniPhp\net\HttpClient;
use BniApi\BniPhp\utils\Constant;
use BniApi\BniPhp\utils\BniEnc;
use GuzzleHttp\RequestOptions;

class Ecollection
{
    public $bni;
    private $httpClient;
    private $clientId;
    private $prefix;
    private $secretKey;

    const DEV_BASE_URL = 'https://apibeta.bni-ecollection.com';
    const UAT_BASE_URL = 'https://api-uat.bni-ecollection.com';
    const PRODUCTION_BASE_URL = "https://api.bni-ecollection.com";

    const ENV_DEV = 'dev';
    const ENV_UAT = 'uat';
    const ENV_PRODUCTION = 'prod';

    function __construct(Bni $bni)
    {
        $this->bni = $bni;
        $this->httpClient = new HttpClient;

        // intialize client id and prefix
        $prefixClientId = explode("-", $this->bni->clientId);
        $this->prefix = $prefixClientId[0];
        $this->clientId = $prefixClientId[1];

        $this->secretKey = $this->bni->clientSecret;
    }

    private function getBaseUrl()
    {
        switch ($this->bni->env) {
            case self::ENV_DEV:
                $baseUrl = self::DEV_BASE_URL;
                break;
            case self::ENV_UAT:
                $baseUrl = self::UAT_BASE_URL;
                break;
            case self::ENV_PRODUCTION:
                $baseUrl = self::PRODUCTION_BASE_URL;
                break;
            default:
                $baseUrl = self::DEV_BASE_URL;
        }
        return $baseUrl;
    }

    public function requestEcollection(array $body)
    {
        $url = $this->getBaseUrl();

        $header = [
            "Content-Type" => "application/json"
        ];

        $bodyJson = [
            RequestOptions::JSON => $body
        ];

        $response = $this->httpClient->request('POST', $url, $header, $bodyJson);
        $response = json_decode($response->getBody());
        if (isset($response->data)) {
            $response->data = BniEnc::decrypt($response->data, $this->clientId, $this->secretKey);
        }

        return (object)$response;
    }

    /**
     * @param string $trxId Transaction/billing id (mandatory)
     * @param string $trxAmount Transaction amount (mandatory if not an open type)
     * @param string $billingType 1 digit billing type (mandatory). Credit: o,c,i,m,n,x. Debit: p,j,d,z
     * @param string $customerName Customer name (mandatory)
     * @param string $customerEmail Customer name (optional)
     * @param string $customerPhone Customer phone (optional)
     * @param string $virtualAccount 16 digit virtual account (optional). Default: autogenerated
     * @param string $datetimeExpired Format: Y-m-dTH:i:sZ. Example: 2023-12-31T23:59:59+07:00 (optional). Default: depends on the client setting
     * @param string $description Description (optional)
     * @return object $response Response object containing status, data and message
     */
    public function createBilling(
        string $trxId,
        string $trxAmount,
        string $billingType,
        string $customerName,
        string $customerEmail,
        string $customerPhone,
        string $virtualAccount,
        string $datetimeExpired,
        string $description
    ) {
        $bodyData = [
            "client_id" => $this->clientId,
            'type' => Constant::ECOLLECTION_TYPE_CREATEBILLING,
            'trx_id' => $trxId,
            'trx_amount' => $trxAmount,
            'billing_type' => $billingType,
            'customer_name' => $customerName,
            'customer_email' => $customerEmail,
            'customer_phone' => $customerPhone,
            'virtual_account' => $virtualAccount,
            'datetime_expired' => $datetimeExpired,
            'description' => $description,
        ];

        $body = [
            "client_id" => $this->clientId,
            "prefix" => $this->prefix,
            "data" => BniEnc::encrypt($bodyData, $this->clientId, $this->secretKey)
        ];

        return $this->requestEcollection($body);
    }

    /**
     * @param string $trxId Transaction/billing id (mandatory)
     * @param string $trxAmount Transaction amount (mandatory if not an open type). Default: 0
     * @param string $customerName Customer name (mandatory)
     * @param string $customerEmail Customer name (optional)
     * @param string $customerPhone Customer phone (optional)
     * @param string $virtualAccount 16 digit virtual account (optional). Default: autogenerated
     * @param string $datetimeExpired Format: Y-m-dTH:i:sZ. Example: 2023-12-31T23:59:59+07:00 (optional). Default: depends on the client setting
     * @param string $description Description (optional)
     * @return object $response Response object containing status, data and message
     */
    public function updateBilling(
        string $trxId,
        string $trxAmount,
        string $customerName,
        string $customerEmail,
        string $customerPhone,
        string $virtualAccount,
        string $datetimeExpired,
        string $description
    ) {
        $bodyData = [
            "client_id" => $this->clientId,
            'type' => Constant::ECOLLECTION_TYPE_UPDATEBILLING,
            'trx_id' => $trxId,
            'trx_amount' => $trxAmount,
            'customer_name' => $customerName,
            'customer_email' => $customerEmail,
            'customer_phone' => $customerPhone,
            'virtual_account' => $virtualAccount,
            'datetime_expired' => $datetimeExpired,
            'description' => $description,
        ];

        $body = [
            "client_id" => $this->clientId,
            "prefix" => $this->prefix,
            "data" => BniEnc::encrypt($bodyData, $this->clientId, $this->secretKey)
        ];

        return $this->requestEcollection($body);
    }

    /**
     * @param string $trxId Transaction/billing id
     * @return object $response Response object containing status, data and message
     */
    public function inquiryBilling(
        string $trxId
    ) {
        $bodyData = [
            "client_id" => $this->clientId,
            'type' => Constant::ECOLLECTION_TYPE_INQUIRYBILLING,
            'trx_id' => $trxId,
        ];

        $body = [
            "client_id" => $this->clientId,
            "prefix" => $this->prefix,
            "data" => BniEnc::encrypt($bodyData, $this->clientId, $this->secretKey)
        ];

        return $this->requestEcollection($body);
    }

    /**
     * @param string $trxId Transaction/billing id (mandatory)
     * @param string $virtualAccount 16 digit virtual account (mandatory)
     * @return object $response Response object containing status, data and message
     */
    public function inactiveBilling(
        string $trxId,
        string $virtualAccount
    ) {
        $bodyData = [
            "client_id" => $this->clientId,
            'type' => Constant::ECOLLECTION_TYPE_INACTIVEBILLING,
            'trx_id' => $trxId,
            'virtual_account' => $virtualAccount,
        ];

        $body = [
            "client_id" => $this->clientId,
            "prefix" => $this->prefix,
            "data" => BniEnc::encrypt($bodyData, $this->clientId, $this->secretKey)
        ];

        return $this->requestEcollection($body);
    }
}
